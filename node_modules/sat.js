/**
 * 
 * Esqueleto escrito por Fernando Castor.
 * Modificado por Douglas Ventura & Lucas Távora
 *  
 */
exports.solve = function(fileName) {
  let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result // two fields: isSat and satisfyingAssignment
}

/**
 * 
 * A funcao nextAssignment recebe os valores booleanos e modifica
 * de forma a passar por todas as probabilidades(se necessario).  
 * 
 */
function nextAssignment(arrayVariables) {
  let aux = true;

  for (let i = 0; i < arrayVariables.length && aux; i++) {
    if (arrayVariables[i] == false) {
      arrayVariables[i] = true;
      aux = false;
    } else {
      arrayVariables[i] = false;
    }
  } 
  return arrayVariables
}


/**
 * 
 * A funcao doSolve testa todas as possibilidades até achar uma 
 * que sastifaca a formula.
 *  
 */
function doSolve(clauses, arrayVariables) {
  let isSat = false
  let cont = 0;
  
  while ((!isSat) && cont < Math.pow(2, arrayVariables.length)) {
    
    let auxClauses = new Array()

    for (let i = 0; i < clauses.length; i++) {
      auxClauses[i] = new Array()
      for (let j = 0; j < clauses[i].length; j++) {
        for (let k = 0; k < variaveis.length; k++) {
          if (Math.abs(clauses[i][j]) == variaveis[k]) {
            if (clauses[i][j] > 0) {
              auxClauses[i].push(arrayVariables[k])
            } else {
              auxClauses[i].push(!arrayVariables[k])
            }
          }
        }
      }
    }
    
    let auxCheck = true;
    for(let i = 0; i < auxClauses.length; i++){
      var auxBoolean = false;
      for(let j = 0;j < auxClauses[i].length && !auxBoolean; j++){
        if(auxClauses[i][j] == true){
          auxClauses[i] = true
          auxBoolean = true
        }
      }
      if(!auxBoolean){
        auxClauses[i] = false
        auxCheck = false;
      }
    }

    if(auxCheck){
      isSat = true
    } else{
      arrayVariables = nextAssignment(arrayVariables)
    }
    cont++
  }

  let result = { 'isSat': isSat, satisfyingAssignment: null }
  if (isSat) {
    result.satisfyingAssignment = arrayVariables
  }
  return result
}
  
function readFormula(fileName) {
  var fs = require("fs")
  let text = fs.readFileSync(fileName, 'utf8').split('\n') 
  
  let clauses = readClauses(text)
  let variables = readVariables(clauses)
  let specOk = checkProblemSpecification(text, clauses, variables)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}


/** 
 * 
 * A funcao readClauses percorre as linhas do arquivo e guardar no array as linhas 
 * que tem os numeros, ignorando os comentarios(c), linha do problema(p) e linhas que vazias.   
 * 
*/
function readClauses(text) { // funcao readClauses implementada.
  let arrayClauses = []
  
  for (let i = 0; i < text.length; i++) {
    if (text[i].charAt(0) != 'c' && text[i].charAt(0) != 'p' && text[i] != '') {
      var aux = text[i].split(" ");
      aux.pop();
      arrayClauses.push(aux);
    }
  }
  return arrayClauses;
}


/**
 * 
 * A funcao readVariables pega o array de clausulas percorre cada posicao do array e
 * guarda os valores absolutos numa variavel auxiliar que sera alterada sempre que o valor absoluto
 * for maior do que o ja existente. Depois usa essa valor para definir o tamanho do array de variaveis
 * adicionando false em cada espaco do array. 
 *  
 */

var variaveis = []

function readVariables(clauses) { // funcao readVariables implementada.
  var arrayVariables = []
  let auxValue = 0;

  for (let i = 0; i < clauses.length; i++) {
    for (let j = 0; j < clauses[i].length; j++) {
      if (Math.abs(clauses[i][j]) > auxValue) {
        auxValue = Math.abs(clauses[i][j]);
      }
    } 
  }
  for (let k = 0; k < auxValue; k++) {
    arrayVariables[k] = false; 
  }
  return arrayVariables;
}


/**
 *  
 * A funcao checkProblemSpecification checa se as variaveis e as clausulas dada na linha p
 * do texto é igual a quantidade de clausulas e de variaveis retornadas por suas respectivas funcoes.
 * 
 */
function checkProblemSpecification(text, clauses, variables) {
  let arrayAux = [];
  let qntVariables;
  let qntClauses;
  let check = true;

  for (let i = 0; i < text.length || check; i++) {
    if (text[i].charAt(0) == 'p') {
      arrayAux = text[i].split(" ");
      check = false;
    }
  }
  qntVariables = arrayAux[2];
  qntClauses = arrayAux[3];
  
  if (qntVariables == variables.length && qntClauses == clauses.length) {
    return true;
  } else {
    return false;
  }

}